// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"   // dev: SQLite; in prod passa a "postgresql" + DATABASE_URL
  url      = env("DATABASE_URL")
}


model Tenant {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique

  whatsappPhoneId String?  @unique
  whatsappToken   String?
  gcalPrimaryId   String?

  bookings        Booking[]
  googleAuth      GoogleAuth?
  webhooks        ProcessedWebhook[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model GoogleAuth {
  id           String   @id @default(cuid())

  tenantId     String   @unique
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  accessToken  String
  refreshToken String
  scope        String?
  tokenType    String?
  expiryDate   DateTime

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Booking {
  id            String        @id @default(cuid())

  tenantId      String
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  customerName  String
  customerPhone String
  people        Int
  startAt       DateTime
  endAt         DateTime
  notes         String?

  source        String
  waMessageId   String?
  gcalEventId   String?

  status        String   @default("pending")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId, status, startAt])
}

model ProcessedWebhook {
  id         String   @id @default(cuid())

  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  provider   String
  messageId  String
  receivedAt DateTime @default(now())

  @@unique([tenantId, provider, messageId])
  @@index([tenantId, receivedAt])
}
